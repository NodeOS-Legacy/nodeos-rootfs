#!/usr/bin/env bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

set -o pipefail


GRN="\e[32m"
CLR="\e[0m"


__dirname=`dirname "$(readlink -f "$0")"`


while getopts ":B:D:F:I:K:O:U:" opt; do
  case $opt in
    B)
      BAREBONES="$OPTARG"  # Location of the barebones image
    ;;

    D)
      DTS="$OPTARG"  # Device Tree Specs directory
    ;;

    F)
      FORMAT="$OPTARG"  # Output format
    ;;

    I)
      INITRAMFS="$OPTARG"  # Location of the initramfs image
    ;;

    K)
      KERNEL="$OPTARG"  # Location of the barebones kernel
    ;;

    O)
      OUTPUT="$OPTARG"  # Output location
    ;;

    U)
      USERSFS="$OPTARG"  # Usersfs location to be mounted from
    ;;
  esac
done

if [[ -z "$OUTPUT" ]]; then
  echo "-O is mandatory"
  exit 1
fi

if [[ "$USERSFS" ]]; then
  USERSFS=`blkid $USERSFS -o export | grep UUID`
fi


TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"`

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -d $OBJECTS ]]; then
  chmod -R u+w $OBJECTS &&
  rm    -rf    $OBJECTS || exit 10
fi


#
# Define steps paths
#

EFIBOOT_DIR=$OBJECTS/efiboot
EFIBOOT_IMG=$EFIBOOT_DIR.img
IMG_DIR=$OBJECTS/img
ISO_DIR=$OBJECTS/iso


#
# SysLinux
#

SRC_DIR=$__dirname/../deps/syslinux


#
# Wrap the system up and pack it
#

function createPartitionImage() {
  # Copy kernel and initramfs on the partition image

  cp $INITRAMFS $STEP_DIR/initram.gz || exit 20

  # Create partition image

  mkdir -p `dirname $OUTPUT` || exit 21

  # Size in KB
  # DISK_SIZE=`du -ks $STEP_DIR | cut -f1`
  DISK_SIZE=$((32*1024))

  genfatfs -b $DISK_SIZE \
      --root $STEP_DIR   \
      $OUTPUT            || exit 22
}

function createEfiImage() {
  STEP_DIR=$EFIBOOT_DIR

  rm -rf $STEP_DIR   &&
  mkdir -p $STEP_DIR || exit 30

  # Copy SysLinux files

  eval "echo \"$(<$__dirname/../resources/syslinux.cfg)\"" \
      > $STEP_DIR/syslinux.cfg                             || exit 31

  cp $SRC_DIR/efi$BITS/efi/syslinux.efi                     \
     $SRC_DIR/efi$BITS/com32/elflink/ldlinux/ldlinux.e$BITS \
     $STEP_DIR                                              || exit 32

  # Copy kernel and initramfs on the ISO image

  cp $KERNEL    $STEP_DIR &&
  cp $INITRAMFS $STEP_DIR/initram.gz || exit 33

  # Create EFI disk image

  # DISK_SIZE=`du -ks $STEP_DIR | cut -f1`
  DISK_SIZE=$((32*1024))

  genfatfs -b $DISK_SIZE \
    --root $STEP_DIR     \
    $EFIBOOT_IMG         || exit 34
}

function createIsoImage() {
  mkdir -p $STEP_DIR || exit 40

  eval "echo \"$(<$__dirname/../resources/syslinux.cfg)\"" \
      > $STEP_DIR/syslinux.cfg                             || exit 41

  # Create EFI boot image
  createEfiImage            || exit $?
  cp $EFIBOOT_IMG $STEP_DIR || exit 42

  # Copy IsoLinux files

  cp $SRC_DIR/bios/core/isolinux.bin                 \
     $SRC_DIR/bios/com32/elflink/ldlinux/ldlinux.c32 \
     $STEP_DIR                                       || exit 43

  # Copy kernel and initramfs on the ISO image

  cp $KERNEL    $STEP_DIR &&
  cp $INITRAMFS $STEP_DIR/initram.gz || exit 44

  # Create ISO image

  mkdir -p `dirname $OUTPUT` || exit 45

  # http://wiki.osdev.org/Bootable_El-Torito_CD_with_GRUB_Legacy#Mkisofs_says_Uh_oh.2C_I_cant_find_the_boot_image
  # genisoimage looks for its boot image as a subdirectory of the filesystem on the CD
  genisoimage -o $OUTPUT  \
    -c boot.cat           \
    -V NodeOS             \
    -b isolinux.bin       \
      -no-emul-boot       \
      -boot-load-size 4   \
      -boot-info-table    \
    -eltorito-alt-boot    \
    -efi-boot efiboot.img \
      -no-emul-boot       \
    $STEP_DIR             || exit 46

  $SRC_DIR/bios/utils/isohybrid $OUTPUT || exit 47
}


case $MACHINE in
  pc)
    case $FORMAT in
      img)  # FAT partition
        STEP_DIR=$IMG_DIR

        mkdir -p $STEP_DIR || err 50

        # Copy SysLinux files

        eval "echo \"$(<$__dirname/../resources/syslinux.cfg)\"" \
            > $STEP_DIR/syslinux.cfg                             || exit 51

        cp $KERNEL $STEP_DIR || exit 52

        createPartitionImage || exit $?

        $SRC_DIR/bios/mtools/syslinux --install $OUTPUT || exit 53
      ;;

      iso)  # Hybrid ISO image for CDs and USB pendrives
        STEP_DIR=$ISO_DIR

        createIsoImage || exit $?
      ;;

      tar)  # Combine both barebones and initramfs tarfiles in a single one
        STEP_DIR=$OUTPUT

        mkdir -p `dirname $STEP_DIR` || err 60

        gunzip $BAREBONES -c | tar --delete init | gzip > $STEP_DIR &&
        cat    $INITRAMFS                              >> $STEP_DIR || err 61
      ;;

      *)
        echo -e "${RED}Unknown FORMAT '$FORMAT'${CLR}"
        exit 70
      ;;
    esac
  ;;

  raspi|raspi2|raspi3)  # FAT partition for Raspberry PI
    if [[ -z "$DTS" ]]; then
      echo "-D is mandatory for MACHINE '$MACHINE'"
      exit 80
    fi

    case $FORMAT in
      img)
        STEP_DIR=$IMG_DIR

        mkdir -p $STEP_DIR || err 90

        # Copy Raspberry PI extra files
        # http://elinux.org/RPi_Advanced_Setup#Setting_up_the_boot_partition
        #
        # bootcode.bin, fixup.dat, start.elf, cmdline.txt
        (
          cd $STEP_DIR || exit 91

          wget https://github.com/raspberrypi/firmware/raw/master/boot/bootcode.bin || exit 92
          wget https://github.com/raspberrypi/firmware/raw/master/boot/fixup.dat    || exit 93
          wget https://github.com/raspberrypi/firmware/raw/master/boot/start.elf    || exit 94
        ) || err $?

        cp $__dirname/../resources/config.txt $DTS $STEP_DIR || exit 95

        case $MACHINE in
          raspi)
            cp $KERNEL $STEP_DIR/kernel.img || exit 96
          ;;

          raspi2)
            cp $KERNEL $STEP_DIR/kernel7.img || exit 97
          ;;

          raspi3)
            echo arm_control=0x200 >> $STEP_DIR/config.txt &&
            cp $KERNEL $STEP_DIR/kernel7.img               || exit 98
          ;;

          *)
            echo -e "${RED}Unknown MACHINE '$MACHINE'${CLR}"
            exit 99
          ;;
        esac

        createPartitionImage || exit $?
      ;;

      *)
        echo -e "${RED}Unknown FORMAT '$FORMAT'${CLR}"
        exit 100
      ;;
    esac
  ;;

  *)
    echo -e "${RED}Unknown MACHINE '$MACHINE'${CLR}"
    exit 110
  ;;
esac


echo -e "${GRN}Successfully built 'bootfs'${CLR}"
