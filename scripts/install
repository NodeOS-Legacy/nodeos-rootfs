#!/usr/bin/env bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


# Platform aliases
case $PLATFORM in
  pc|qemu)
    PLATFORM=pc_qemu
  ;;
  image)
    PLATFORM=pc_image
  ;;

  qemu_32)
    PLATFORM=pc_qemu_32
  ;;
  image_32)
    PLATFORM=pc_image_32
  ;;

  qemu_64)
    PLATFORM=pc_qemu_64
  ;;
  image_64)
    PLATFORM=pc_image_64
  ;;

  raspberry)
    PLATFORM=raspberry_qemu
  ;;
esac

# default CPU for each platform
if [[ -z "$CPU" ]]; then
  case $PLATFORM in
    docker)
      CPU=`uname -m`
    ;;
    docker_32)
      CPU=i686
    ;;
    docker_64)
      CPU=x86_64
    ;;

    pc_qemu|pc_image)
      CPU=`uname -m`
    ;;
    pc_qemu_32|pc_image_32)
      CPU=i686
    ;;
    pc_qemu_64|pc_image_64)
      CPU=x86_64
    ;;

    raspberry_qemu|raspberry_image)
      CPU=armv6
    ;;
  esac
fi

case $CPU in
  armv6)
    TARGET=$CPU-nodeos-linux-musleabihf
    NODE_ARCH=arm
  ;;
  i[456]86)
    TARGET=$CPU-nodeos-linux-musl
    NODE_ARCH=ia32
  ;;
  x86_64)
    TARGET=$CPU-nodeos-linux-musl
    NODE_ARCH=x64
  ;;
  *)
    echo "Unknown CPU '$CPU'"
    exit 1
  ;;
esac


if [[ -z "$name" ]]; then name=rootfs; fi

ROOT=$(pwd)/ROOT/rootfs
HOME=$ROOT/root

if [[ -d $ROOT ]]; then
  chmod -R u+w $ROOT &&
  rm    -rf    $ROOT || exit 300
fi
mkdir -p $HOME               || exit 301
mkdir -p $(pwd)/ROOT/workdir || exit 302


#
# Use a well-known DNS server for now, we do not yet support DHCP
#

mkdir -p $ROOT/etc              &&
cp    -f resolv.conf $ROOT/etc/ || exit 320


#
# Install system dependencies
#

NUM_JOBS=$((`getconf _NPROCESSORS_ONLN` + 1))

BAREBONES=`pwd`/../nodeos-barebones

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
NODE_DIR=$BAREBONES/deps/node

PATH=$TOOLCHAIN/cross-tools/bin:/bin:/usr/bin

CC=$TARGET-gcc                  \
CXX=$TARGET-g++                 \
npm_config_prefix=$HOME         \
$NODE_DIR/deps/npm/cli.js       \
    install -g                  \
    --arch=$NODE_ARCH           \
    --nodedir=$NODE_DIR         \
    --jobs=$NUM_JOBS            \
    `grep -v "^#" packages.txt` || exit 330

ln -sf bin/nodeos-mount-usersfs $HOME/init || exit 331
ln -sf root/init                $ROOT/init || exit 332


#
# Services to be started at boot
#

mkdir -p $HOME/etc                 &&
cp forever-starter.json $HOME/etc/ || exit 340


#
# Wrap the system up and pack it
#

# Set rootfs files ONLY readable
chmod -R u-w,go-rw "$ROOT" || exit 350
#chmod -R u-w,go-rw "$ROOT"         &&
#chmod -R go+r      "$ROOT/usr/bin" || exit 350

case $PLATFORM in
  docker|docker_32|docker_64)
    docker build -t $name . || exit 351
  ;;
  pc_qemu  | pc_qemu_32  | pc_qemu_64  | \
  pc_image | pc_image_32 | pc_image_64 | \
  raspberry_qemu | raspberry_image)
    # Copy kernel and initramfs on the disk image

    # cp vmlinuz $ROOT/vmlinuz &&
    # cp initrd  $ROOT/initrd  || exit 330

    # Create the disk image

    DISK_SIZE=32  # Size in MB

    genext2fs -b $((DISK_SIZE*1024)) --root $(pwd)/ROOT --bytes-per-inode 8192 \
      --reserved-percentage 0 --squash-uids $name.img || exit 352
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
