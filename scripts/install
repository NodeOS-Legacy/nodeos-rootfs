#!/usr/bin/env bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


BAREBONES=`pwd`/../nodeos-barebones
INITRAMFS=`pwd`/../nodeos-initramfs

NODE_DIR=$BAREBONES/deps/node

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -z "$name" ]]; then name=rootfs; fi


if [[ -d $OBJECTS ]]; then
  chmod -R u+w $OBJECTS &&
  rm    -rf    $OBJECTS || exit 10
fi
mkdir -p $OBJECTS || exit 11


#
# Wrap the system up and pack it
#

function createPartitionImage() {
  GENFATFS=deps/genfatfs/genfatfs

  OUT_DIR=$OUT_DIR/image

  # Size in MB
#    DISK_SIZE=`du -ks $OBJECTS | cut -f1`
  DISK_SIZE=$((16*1024))

  mkdir -p `dirname $OUT_DIR`
  $GENFATFS -b $DISK_SIZE \
      --root $OBJECTS     \
      $OUT_DIR            || exit 23

  ln -sfv $OUT_DIR $name.img || exit 24
}

case $PLATFORM in
  docker)
    docker build -t $name . || exit 20
  ;;

  pc_image)
    # Copy kernel and initramfs on the partition image

#    mkdir -p    $OBJECTS/grub &&
#    cp grub.cfg $OBJECTS/grub || exit 25
    cp syslinux.cfg $OBJECTS || exit 25

    cp $BAREBONES/bzImage           $OBJECTS/bzImage           &&
    cp $INITRAMFS/initramfs.cpio.gz $OBJECTS/initramfs.cpio.gz || exit 26

    createPartitionImage
  ;;

  pc_iso)
    # Copy kernel and initramfs on the disk image

    mkdir -p    $OBJECTS/grub &&
    cp grub.cfg $OBJECTS/grub || exit 25

    cp $BAREBONES/bzImage           $OBJECTS/bzImage           &&
    cp $INITRAMFS/initramfs.cpio.gz $OBJECTS/initramfs.cpio.gz || exit 26

    # Create the iso image

    OUT_DIR=$OUT_DIR/iso

    mkdir -p `dirname $OUT_DIR`
    grub-mkrescue /usr/lib/grub/i386-pc -o $OUT_DIR $OBJECTS || exit 27
    ln -sfv $OUT_DIR $name.iso                               || exit 28
  ;;

  raspberry_image)
    # Copy kernel and initramfs on the partition image

    cp $BAREBONES/bzImage           $OBJECTS/kernel.img        &&
    cp $INITRAMFS/initramfs.cpio.gz $OBJECTS/initramfs.cpio.gz || exit 26

    # Copy Raspberry PI extra files
    # http://elinux.org/RPi_Advanced_Setup#Setting_up_the_boot_partition
    #
    # bootcode.bin, start.elf, cmdline.txt

    createPartitionImage
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
