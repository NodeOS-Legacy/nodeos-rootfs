#!/usr/bin/env bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


if [[ -z "$name" ]]; then name=rootfs; fi

ROOT=$(pwd)/ROOT/rootfs
HOME=$ROOT/root

if [[ -d $ROOT ]]; then
  chmod -R u+w $ROOT &&
  rm    -rf    $ROOT || exit 300
fi
mkdir -p $HOME               || exit 301
mkdir -p $(pwd)/ROOT/workdir || exit 302


# #
# # glibc & gcc libraries and binaries
# #
# #
# # *** WARNING ***
# #
# # This consume A LOT of space (about 173mb) since it includes gcc and other
# # binaries, so it's useful if you want to install later compiled modules, but
# # it's not the best option if you are building a minimalistic NodeOS image
# #
#
# cp -a ../nodeos-barebones/out/ia32/* $ROOT &&
# (
#   cd $ROOT
#   rm -df lib/ld-2.20.so lib/ld-linux.so.2 lib/libc-2.20.so lib/libdl-2.20.so \
#          lib/libm-2.20.so lib/libpthread-2.20.so lib/librt-2.20.so \
#          lib/libc.so.6 lib/libdl.so.2 lib/libm.so.6 lib/libpthread.so.0 \
#          lib/librt.so.1 usr/lib/libgcc_s.so.1 lib/libgcc_s.so.1 \
#          usr/lib/libstdc++.so.6.0.20 usr/lib/libstdc++.so.6 usr/bin/env \
#          usr/bin/node
# ) || exit 310


#
# Use a well-known DNS server for now, we do not yet support DHCP
#

mkdir -p $ROOT/etc              &&
cp    -f resolv.conf $ROOT/etc/ || exit 320


#
# Install system dependencies
#

NODE_DIR=`pwd`/../nodeos-barebones/deps/node
NPM="node $NODE_DIR/deps/npm/cli.js"
npmi="npm_config_prefix=$HOME $NPM i -g"

eval $npmi `grep -v "^#" packages.txt` &&
rm -rf $HOME/.npm $HOME/.node-gyp      || exit 330

ln -sf bin/nodeos-mount-usersfs $HOME/init || exit 331
ln -sf root/init                $ROOT/init || exit 332


#
# Services to be started at boot
#

mkdir -p $HOME/etc                 &&
cp forever-starter.json $HOME/etc/ || exit 340


#
# Wrap the system up and pack it
#

# Set rootfs files ONLY readable
chmod -R u-w,go-rw "$ROOT" || exit 350
#chmod -R u-w,go-rw "$ROOT"         &&
#chmod -R go+r      "$ROOT/usr/bin" || exit 350

case $PLATFORM in
  docker)
    docker build -t $name . || exit 351
  ;;
  qemu)
    # Copy kernel and initramfs on the disk image

    # cp vmlinuz $ROOT/vmlinuz &&
    # cp initrd  $ROOT/initrd  || exit 330

    # Create the disk image

    DISK_SIZE=32  # Size in MB
#    DISK_SIZE=192  # Size in MB

    genext2fs -b $((DISK_SIZE*1024)) --root "$(pwd)/ROOT" --bytes-per-inode 8192 --reserved-percentage 0 --squash-uids $name.img || exit 352
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
