#!/usr/bin/env bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


BAREBONES=`pwd`/../nodeos-barebones
INITRAMFS=`pwd`/../nodeos-initramfs

NODE_DIR=$BAREBONES/deps/node

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -z "$name" ]]; then name=rootfs; fi


ROOT=$OBJECTS/rootfs
HOME=$ROOT/root

if [[ -d $ROOT ]]; then
  chmod -R u+w $ROOT &&
  rm    -rf    $ROOT || exit 300
fi
mkdir -p $HOME            || exit 301
mkdir -p $OBJECTS/workdir || exit 302


#
# Use a well-known DNS server for now, we do not yet support DHCP
#

mkdir -p $ROOT/etc              &&
cp    -f resolv.conf $ROOT/etc/ || exit 320

mkdir -p $ROOT/usr/share/terminfo/l &&
cp /usr/share/terminfo/l/linux-vt $ROOT/usr/share/terminfo/l/linux


#
# Install system dependencies
#

CC=$TARGET-gcc                  \
CXX=$TARGET-g++                 \
npm_config_prefix=$HOME         \
$NODE_DIR/deps/npm/cli.js       \
    install -g                  \
    --loglevel warn             \
    --arch=$NODE_ARCH           \
    --nodedir=$NODE_DIR         \
    --jobs=$JOBS                \
    `grep -v "^#" packages.txt` || exit 330

ln -sf bin/nodeos-mount-usersfs $HOME/init || exit 331
ln -sf root/init                $ROOT/init || exit 332


#
# Services to be started at boot
#

mkdir -p $HOME/etc                 &&
cp forever-starter.json $HOME/etc/ || exit 340


#
# Wrap the system up and pack it
#

# Set rootfs files ONLY executable
chmod -R u-w,go-rw "$ROOT" || exit 350
chmod go+r "$ROOT/usr/share/terminfo/l/linux" || exit 350

case $PLATFORM in
  docker)
    docker build -t $name . || exit 351
  ;;

  pc_qemu | raspberry_qemu | raspberry_image)
    # Create the disk image

    OUT_DIR=$OUT_DIR/qemu

    # Size in MB
#    DISK_SIZE=`du -ks $OBJECTS | cut -f1`
    DISK_SIZE=$((32*1024))

    mkdir -p `dirname $OUT_DIR`
    genext2fs -b $DISK_SIZE     \
        --root $OBJECTS         \
        --bytes-per-inode 8192  \
        --reserved-percentage 0 \
        --squash-uids $OUT_DIR  || exit 352

    ln -sfv $OUT_DIR $name.img || exit 353
  ;;

  pc_image)
    # Copy kernel and initramfs on the disk image

    mkdir -p    $OBJECTS/boot/grub &&
    cp grub.cfg $OBJECTS/boot/grub || exit 354

    cp $BAREBONES/bzImage           $OBJECTS/boot/bzImage           &&
    cp $INITRAMFS/initramfs.cpio.gz $OBJECTS/boot/initramfs.cpio.gz || exit 355

    # Create the disk image

    OUT_DIR=$OUT_DIR/image

    mkdir -p `dirname $OUT_DIR`
    grub-mkrescue /usr/lib/grub/i386-pc -o $OUT_DIR $OBJECTS || exit 356
    ln -sfv $OUT_DIR $name.img                               || exit 357
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
