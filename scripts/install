#!/usr/bin/env bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


BAREBONES=`pwd`/../nodeos-barebones
NODE_DIR=$BAREBONES/deps/node

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -z "$name" ]]; then name=rootfs; fi


ROOT=$OBJECTS/rootfs
HOME=$ROOT/root

if [[ -d $ROOT ]]; then
  chmod -R u+w $ROOT &&
  rm    -rf    $ROOT || exit 300
fi
mkdir -p $HOME               || exit 301
mkdir -p $OBJECTS/workdir || exit 302


#
# Use a well-known DNS server for now, we do not yet support DHCP
#

mkdir -p $ROOT/etc              &&
cp    -f resolv.conf $ROOT/etc/ || exit 320


#
# Install system dependencies
#

CC=$TARGET-gcc                  \
CXX=$TARGET-g++                 \
npm_config_prefix=$HOME         \
$NODE_DIR/deps/npm/cli.js       \
    install -g                  \
    --loglevel warn             \
    --arch=$NODE_ARCH           \
    --nodedir=$NODE_DIR         \
    --jobs=$JOBS                \
    `grep -v "^#" packages.txt` || exit 330

ln -sf bin/nodeos-mount-usersfs $HOME/init || exit 331
ln -sf root/init                $ROOT/init || exit 332


#
# Services to be started at boot
#

mkdir -p $HOME/etc                 &&
cp forever-starter.json $HOME/etc/ || exit 340


#
# Wrap the system up and pack it
#

# Set rootfs files ONLY readable
chmod -R u-w,go-rw "$ROOT" || exit 350
#chmod -R u-w,go-rw "$ROOT"         &&
#chmod -R go+r      "$ROOT/usr/bin" || exit 350

case $PLATFORM in
  docker)
    docker build -t $name . || exit 351
  ;;
  pc_qemu | pc_image | raspberry_qemu | raspberry_image)
    # Copy kernel and initramfs on the disk image

    # cp vmlinuz $ROOT/vmlinuz &&
    # cp initrd  $ROOT/initrd  || exit 330

    # Create the disk image

    DISK_SIZE=32  # Size in MB

    mkdir -p `dirname $OUT_DIR`
    genext2fs -b $((DISK_SIZE*1024)) --root $OBJECTS --bytes-per-inode 8192 \
      --reserved-percentage 0 --squash-uids $OUT_DIR || exit 352
    ln -sfv $OUT_DIR $name.img                       || exit 28
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
