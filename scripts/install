#!/usr/bin/env bash

# We prepare the ROOT filesystem with dependencies from NPM
# Since there is no functional NPM on the system yet, we use NPM from the
# downloaded Node.js source code to install NPM packages into the container

GRN="\e[32m"
CLR="\e[0m"


BAREBONES=`pwd`/../nodeos-barebones
INITRAMFS=`pwd`/../nodeos-initramfs

NODE_DIR=$BAREBONES/deps/node

TOOLCHAIN=$BAREBONES/node_modules/nodeos-cross-toolchain
TOOLS=$TOOLCHAIN/out

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?


if [[ -z "$name" ]]; then name=rootfs; fi


if [[ -d $OBJECTS ]]; then
  chmod -R u+w $OBJECTS &&
  rm    -rf    $OBJECTS || exit 10
fi
mkdir -p $OBJECTS || exit 11


#
# Wrap the system up and pack it
#

GENFATFS=deps/genfatfs/genfatfs

case $CPU_FAMILY in
  i386)
    BITS=32
  ;;
  x86_64)
    BITS=64
  ;;
esac

function createPartitionImage() {
  # Copy kernel and initramfs on the partition image

  cp $BAREBONES/bzImage           $OBJECTS/kernel.img &&
  cp $INITRAMFS/initramfs.cpio.gz $OBJECTS/initram.gz || exit 20

  # Create partition image

  OUT_DIR=$OUT_DIR/image
  mkdir -p `dirname $OUT_DIR`

  # Size in MB
#    DISK_SIZE=`du -ks $OBJECTS | cut -f1`
  DISK_SIZE=$((16*1024))

  $GENFATFS -b $DISK_SIZE \
      --root $OBJECTS     \
      $OUT_DIR            || exit 21

  ln -sfv $OUT_DIR $name.img || exit 22
}

function createEfiImage() {
  rm -rf efiboot
  mkdir -p efiboot || exit 11

  cp syslinux.cfg efiboot || exit 41

  # Copy kernel and initramfs on the ISO image

  cp $BAREBONES/bzImage           efiboot/kernel.img &&
  cp $INITRAMFS/initramfs.cpio.gz efiboot/initram.gz || exit 30

  # Copy SysLinux files

  cp /usr/lib/SYSLINUX.EFI/efi$BITS/syslinux.efi       \
     /usr/lib/syslinux/modules/efi$BITS/ldlinux.e$BITS \
     efiboot                                           || exit 31

  # Create EFI disk image

#    DISK_SIZE=`du -ks $OBJECTS | cut -f1`
  DISK_SIZE=$((16*1024))

  $GENFATFS -b $DISK_SIZE \
    --root efiboot      \
    efiboot.img         || exit 21
}

function createIsoImage() {
  # Create EFI boot image
  createEfiImage          || exit $?
  cp efiboot.img $OBJECTS || exit 30

  # Copy kernel and initramfs on the ISO image

  cp $BAREBONES/bzImage           $OBJECTS/kernel.img &&
  cp $INITRAMFS/initramfs.cpio.gz $OBJECTS/initram.gz || exit 30

  # Copy IsoLinux files

  cp /usr/lib/ISOLINUX/isolinux.bin                \
     /usr/lib/syslinux/modules/bios/ldlinux.c$BITS \
     $OBJECTS                                      || exit 31

  # Create ISO image

  OUT_DIR=$OUT_DIR/iso
  mkdir -p `dirname $OUT_DIR`

  genisoimage -o $OUT_DIR \
    -c boot.cat           \
    -b isolinux.bin       \
      -no-emul-boot       \
      -boot-load-size 4   \
      -boot-info-table    \
    -eltorito-alt-boot    \
    -efi-boot efiboot.img \
      -no-emul-boot       \
    $OBJECTS              &&
  isohybrid $OUT_DIR      || exit 32

  ln -sfv $OUT_DIR $name.iso || exit 33
}

case $PLATFORM in
  docker)
    docker build -t $name . || exit 40
  ;;

  pc_iso)
    cp syslinux.cfg $OBJECTS || exit 42

    createIsoImage || exit $?
  ;;

  raspberry_image)
    # Copy Raspberry PI extra files
    # http://elinux.org/RPi_Advanced_Setup#Setting_up_the_boot_partition
    #
    # bootcode.bin, start.elf, cmdline.txt

    createPartitionImage || exit $?
  ;;
esac


echo -e "${GRN}Successfully built '$name'${CLR}"
